#for 1A namelist and 1B
import pandas as pd
import numpy as np
from collections import Counter
import random
from datetime import datetime

ED_colkeep = (0,1,2,3,4,5,6,7,8,9,10,11,12,14,20,25,38,34,35,36,66,67,79,83)
FD_colkeep = (0,78,1,25,26,27,28)
VC_dorm = ('Sungei Tengah Lodge','Tuas View Dormitory',
                'CDPL Tuas Dormitory','PPT Lodge 1B','Kranji Lodge 1')
VC_colkeep = (2,3,4,79,20,25,31,80,81,83)

def read(path,sheet):
    df = pd.read_excel(path,sheet)
    return df

def isolate_1B(df):
    df.drop(index = df.index[df['1A/1B']=='1A'].tolist(),inplace = True)
    df.dropna(axis = 0,how ='any', subset = ['1A/1B'],inplace = True)
    df.index = np.arange(1,len(df)+1)
    df['SL NO'] = df.index
    return df
    
def segragated_team_plan(df):
    lst_col = list(df.columns)
    data_c = (0,71,25,67,2,4,70,72,66,73,74,75,76,77)
    drop_col = []
    for num in range(0,len(lst_col)):
        if num not in data_c:
            drop_col.append(lst_col[num])
    df.drop(columns=drop_col,inplace=True)
    #reindex columns
    df_STP= df.reindex(columns=['SL NO','Role in organisation','Direct Employer Company Name',
                                'Team identifier','NRIC/FIN','Name','Activity','Work level',
                                'Work Zone e.g Blk 1 lvl 8, zone A etc',
                                'Arrival time (HH:MM AM/PM)','Morning break (HH:MM AM/PM, duration)',
                                'Lunch time (HH:MM AM/PM, duration)',
                                'Afternoon break (HH:MM AM/PM, duration)','Exit time (HH:MM AM/PM)'])
    df_STP.rename(columns={'Role in organisation':'Role',
                           'Direct Employer Company Name':'Firm',
                           'Name':'Name of worker/staff',
                           'Activity':'Activity to be carried out',
                           'Work level':'Location of work - Floor',
                           'Work Zone e.g Blk 1 lvl 8, zone A etc':'Location of work - Zone'},inplace=True)
    return df_STP

def remove_blanks_duplicates(df):
    #remove duplicates in Employee details sheet
    df.drop_duplicates(subset = ['NRIC/FIN'],keep = "first", inplace = True)#source is changed
    #remove blanks or #N/A values
    df.dropna(axis = 0,how ='any', subset = ['NRIC/FIN'],inplace = True)
    df.index = np.arange(1,len(df)+1)
    df['SL NO'] = df.index
    df['Area of Profesional'].fillna('NA',inplace=True)
    df['Age']=pd.to_numeric(df['Age'])
    return df

def align_format(df):
    global ED_colkeep
    lst = ('STREET NAME','BLOCK','LEVEL','UNIT','Work Zone e.g Blk 1 lvl 8, zone A etc',
           'Team identifier')
    df_col = list(df.columns)
    drop_col =[]
    #drop based on index
    for num in range(0,len(df_col)):
        if num not in ED_colkeep:
            drop_col.append(df_col[num])
    df.drop(columns=drop_col,inplace=True)
    for i in lst:
        df[i].fillna('NA',inplace=True)
    #reorder columns
    df_1 = df.reindex(columns=['SL NO','UEN','NRIC/FIN','Name','Mobile No','Type of Residence','Area of Profesional','Occupation',
                               'Is the individual appointed as a Safe Management Officer (SMO)?',
                               'Is the individual appointed as a Safe Distancing Officer (SDO)?',
                               'Is the individual appointed as a COVID Safe Worker Leader?',
                               'Is the individual based in a worksite/facility?','Company',
                               'Direct Employer Company Name','STREET NAME','BLOCK','LEVEL','UNIT','Work Zone e.g Blk 1 lvl 8, zone A etc','Team identifier',
                               'Type of Pass','Age','1A/1B'])
    return df_1

def write_BCA_master(path,df,df_compare,df_vc,df_switch):
    with pd.ExcelWriter(path) as writer:
        df.to_excel(writer, sheet_name = 'masterfile', index=False)
        df_compare.to_excel(writer, sheet_name = 'Additon Removal', index=False)
        df_vc.to_excel(writer, sheet_name = 'vacinated check', index=False)
        df_switch.to_excel(writer, sheet_name = 'switch project', index=False)

def write_BCA_1B(path,df_FD,df_EM,df_WD,df_STP,df_compare,df_switch):
    with pd.ExcelWriter(path) as writer:
        df_FD.to_excel(writer, sheet_name = 'Firm Details_1B', index=False)
        df_EM.to_excel(writer, sheet_name = 'Employee Details_1B', index=False)
        df_WD.to_excel(writer, sheet_name = 'Worksite Details_1B', index=False)
        df_STP.to_excel(writer, sheet_name = 'Segregated Team Plan_1B', index=False)
        df_compare.to_excel(writer, sheet_name = 'Addition Removal of names', index=False)
        df_switch.to_excel(writer, sheet_name = 'switch project', index=False)

def align_firm(df):
    global FD_colkeep
    proj_ref = []
    drop_col = []
    df_col = list(df.columns)
    for num in range(0,len(df_col)):
        if num not in FD_colkeep:
            #drop_col stores list of columns names to be dropped
            drop_col.append(df_col[num])
    df.drop(columns=drop_col,inplace=True)
    #remove duplicates of UEN
    df.drop_duplicates(subset = ['UEN'],keep = "first", inplace = True)
    df.index = np.arange(1,len(df)+1)
    df['SL NO'] = df.index
    for i in range(len(df.index)):
        proj_ref.append('A0552-01579-2018')
    df.insert(1,'BCA Project Reference No / Contract No / Unique Identifier No',proj_ref,False)               
    df.rename(columns={'SL NO':'Serial No',
                       'Direct Employer Company Name':'Firm Name',
                       'Name of company POC':'Representative Name',
                       'Mobile of company POC':'Representative Mobile No',
                       'Email of company POC':'Representative Email'},inplace=True)
    df_1= df.reindex(columns=['Serial No','BCA Project Reference No / Contract No / Unique Identifier No',
                              'Role of Firms','UEN','Firm Name','Representative Name',
                              'Representative Mobile No','Representative Email'])
    return df_1

def worksite(df):
    #pass in copy of EMv1(deep copy)
    #create new dataframe ['Zone','Activity', 'Team', 'week 0' - 'week12']
    df_worksite = pd.DataFrame(columns = ['Work Zone e.g Blk 1 lvl 8, zone A etc','Activity','Team identifier',
                                          'Week 0','Week 1','Week 2', 'Week 3', 'Week 4', 'Week 5', 'Week 6',
                                          'Week 7', 'Week 8', 'Week 9', 'Week 10', 'Week 11', 'Week 12'])
    df_worksite.fillna(0)#fill all cells with 0
    #remove blanks
    df.dropna(axis = 0,how ='any', subset = ['Team identifier'],inplace = True)
    df_wd_columns = list(df_worksite.columns)
    for i in df_wd_columns[0:3]:
        #assign df values fo df_worksite values
        #column names must be the same
        df_worksite[i] = df[i]
    #store team list in a dictonary(key = team, value = count)
    dic = dic_team(df_worksite['Team identifier'])
    #remove all duplicates from team
    df_worksite.drop_duplicates(subset = ['Team identifier'],keep = "first", inplace = True)
    #dic should be a dic{key = team, value = count of team}
    #call calculate func to fill in weeks
    df_worksite.index = df_worksite['Team identifier']
    df_worksite = calc_team(dic, df_worksite)
    df_worksite.index = np.arange(1,len(df_worksite)+1)
    return df_worksite

def calc_team(dic,df):
    weekly_list = ('1-1','2-1','2-2','2-3','40-1')#full attendence every week
    client_subcon_temp = ('41-1','41-2','41-3','41-4','41-5','41-6','41-7',
                          '43-1','53-1','54-1','46-1','47-1','48-1')
    wt = ((df.columns))[3:]
    df_weeks= list(df.columns)#list of columns names to be iterated
    df_weeks = df_weeks[3:]#drop out first columns name
    team_list = df['Team identifier']#index
    for team in df['Team identifier']:
        val = dic.get(team_list[team])
        if team_list[team] in weekly_list:
            for week in wt:
                df.loc[team,week] = val
        elif team_list[team] in client_subcon_temp:
            for week in wt[:5:1]:
                df.loc[team,week] = val
        else:#team in neither 
            if (val%3) == 1:
                #if activity is WSH
                if df.loc[team, 'Activity'] == 'WSH' or df.loc[team, 'Activity'] == 'Scaffolding work':#WSH and scafoldding exception
                    for week in wt:
                        df.loc[team,week] = val
                else:
                    if val>10:
                        for week in wt[::2]:#all even weeks
                            df.loc[team,week] = (val//2) + int(random.randrange(0,(val//3),1))
                        for week in wt[1::2]:#all odd weeks
                            df.loc[team,week] = (val//2) + int(random.randrange(0,(val//5),1))
                    else:
                        for week in wt:
                            df.loc[team,week] = val
            else:#val<100 or val == 100
                if df.loc[team, 'Activity'] == 'WSH' or df.loc[team, 'Activity'] == 'Scaffolding work':##WSH and scafoldding exception
                    for week in wt:
                        df.loc[team,week] = val
                else:
                    if val>10:
                        for week in wt[::2]:# all even weeks
                            df.loc[team,week] = (val//2) + int(random.randrange(0,(val//3),1))
                        for week in wt[1::2]:#all odd weeks
                            df.loc[team,week] = (val//2) + int(random.randrange(0,(val//5),1))
                            
                    else:#val<10
                        for week in wt:
                            df.loc[team,week] = val
    #fill all missing cells as int(0)\
    for week in wt:
        df[week].fillna(int(0),inplace=True)
    return df

def dic_team(df):#pass of one column in argument
    d = Counter(list(df))
    return d

def compare(df_A,df_B):
    #compare latest and earlier versions
    #df_A is latest, df_B is outdated
    #isolate added and remove names
    #create new dataframe
    added_NRIC = []
    added_names = []
    added_company = []
    added_project =[]
    remove_NRIC = []
    remove_names = []
    remove_company = []
    remove_project =[]
    #for added names
    col_nricA = list(df_A.iloc[:,2])
    col_nricB = list(df_B.iloc[:,2])
    for num in range(1,len(col_nricA)):
        if df_A.iloc[num,2] in col_nricB:
            pass
        else:
            added_NRIC.append(df_A.iloc[num,2])
            added_names.append(df_A.iloc[num,3])
            added_company.append(df_A.iloc[num,12])
            added_project.append(df_A.iloc[num,22])
    #for remove names
    for num in range(1,len(col_nricB)):
        if df_B.iloc[num,2] in col_nricA:
            pass
        else:
            remove_NRIC.append(df_B.iloc[num,2])
            remove_names.append(df_B.iloc[num,3])
            remove_company.append(df_B.iloc[num,12])
            remove_project.append(df_B.iloc[num,22])
    #compare len
    while len(added_NRIC) != len(remove_NRIC):
        #if added_NRIC more
        if len(added_NRIC)<len(remove_NRIC):
            added_NRIC.append('-')
            added_names.append('-')
            added_company.append('-')
            added_project.append('-')
        if len(remove_NRIC)<len(added_NRIC):
            remove_NRIC.append('-')
            remove_names.append('-')
            remove_company.append('-')
            remove_project.append('-')
    d_dic = {'added_NRIC/FIN':added_NRIC,'added_names':added_names,
             'added_company':added_company,'added_project':added_project,'remove_NRIC/FIN':remove_NRIC,
             'remove_names':remove_names,'remove_company':remove_company,'remove_project':remove_project}
    df_compare = pd.DataFrame(data = d_dic)
    return df_compare

#rework switch check
#take master and prev
def switch_check(df_mastersheet,df_outdated):#copy of sheets
    #compare latest and earlier versions
    #isolate added and remove names
    #create new dataframe
    switch_over_NRIC = []
    switch_over_names = []
    switch_over_company = []
    switch_over_prev_project =[]
    switch_over_new_project =[]
    col_nric_current = list(df_mastersheet.iloc[:,2])
    col_nric_prev = list(df_outdated.iloc[:,2])
    #compare curent mastersheet with prev mastersheet
    for num in range(1,len(col_nric_current)):
        if df_mastersheet.iloc[num,2] in col_nric_prev:
            #check if project same
            nric = df_mastersheet.iloc[num,2]
            indx = col_nric_prev.index(nric)
            if df_mastersheet.iloc[num,22] != df_outdated.iloc[indx,22]:
                switch_over_NRIC.append(df_mastersheet.iloc[num,2])
                switch_over_names.append(df_mastersheet.iloc[num,3])
                switch_over_company.append(df_mastersheet.iloc[num,12])
                switch_over_prev_project.append(df_outdated.iloc[indx,22])
                switch_over_new_project.append(df_mastersheet.iloc[num,22])
    d_dic = {'switch_over_NRIC':switch_over_NRIC,'switch_over_names':switch_over_names,
             'switch_over_company':switch_over_company,
             'switch_over_prev_project':switch_over_prev_project,
             'switch_over_new_project':switch_over_new_project}
    df_switch = pd.DataFrame(data = d_dic)
    return df_switch

def isvacinated_over45(df):
    global VC_colkeep
    #pass in df true copy
    #isolate over 45 age grp
    index = df.index[df['Age']<45].tolist()
    df.drop(index = index,inplace=True)
    lst_col = list(df.columns)
    drop_col=[]
    #align column format
    for num in range(0,len(lst_col)):
        if num not in VC_colkeep:
            drop_col.append(lst_col[num])
    df.drop(columns=drop_col,inplace=True)
    #reindex column
    df_1= df.reindex(columns=['NRIC/FIN','Name','Age','Company',
                'Direct Employer Company Name','For PBDs, select dormitory from drop-down list','Type of Pass',
                'Vaccination 1st Dose Date (DD/MM/YY)','Vaccination 2nd Dose Date(DD/MM/YY)'])
    return df_1

def isvacinated_dormcheck(df):
    #pass in global variables
    global VC_dorm
    global VC_colkeep
    #pass in full master list
    #keep appropriate columns
    lst_col = list(df.columns)
    drop_col = []
    for num in range(0,len(lst_col)):
        if num not in VC_colkeep:
            drop_col.append(lst_col[num])
    df.drop(columns=drop_col,inplace=True)
    #reindex columns
    df_1= df.reindex(columns=['NRIC/FIN','Name','Age','Company',
                'Direct Employer Company Name','For PBDs, select dormitory from drop-down list','Type of Pass',
                'Vaccination 1st Dose Date (DD/MM/YY)','Vaccination 2nd Dose Date(DD/MM/YY)'])
    for pass_type in df_1['Type of Pass']:
        if pass_type == 'SPR/SC':
            df_1.drop(index = df_1.index[df_1['Type of Pass']=='SPR/SC'].tolist(),inplace = True)
    for dorm_type in df_1['For PBDs, select dormitory from drop-down list']:
        if dorm_type not in VC_dorm:
            df_1.drop(index = df_1.index[df_1['For PBDs, select dormitory from drop-down list']==dorm_type].tolist(),inplace = True)
    df_1.dropna(axis = 0,how ='any', subset = ['For PBDs, select dormitory from drop-down list'],inplace = True)#not in dorm
    return df_1

def consolidate(df_over_45,df_dorm):
    #to consolidate both dataframes
    df_vc = pd.concat([df_over_45,df_dorm])
    #remove potential duplicates of NRIC
    df_vc.drop_duplicates(subset = ['NRIC/FIN'],keep = "first", inplace = True)
    return df_vc

def replace_path(path_dic):
    keys_lst = list(path_dic.keys())
    for key in keys_lst:
        path_dic[key].replace('\\','/')
    return path_dic

if __name__ == '__main__':
    path_master = str(input("Please enter in file location of masterfile BCA submission file:\n"))
    path_pre = str(input("Please enter in file location of preceeded BCA approved file:\n"))

    path_1B = str(input("Please enter in file location of 1B excel file(if not writing for 1B, put 'N'):\n"))
    path_1B_prev = str(input("Please enter in file location of prev 1B excel file(if not writing for 1B, put 'N'):\n"))
    #replace'\'
    path_dic = {'path_master': path_master,
                'path_pre': path_pre,
                'path_1B': path_1B,
                'path_1B_prev': path_1B_prev}
    
    path_dic = replace_path(path_dic)

    #start time
    start_time = datetime.now()
    #initialise dataframes
    #initialise mastersheet
    df_mastersheet = remove_blanks_duplicates(read(path_dic['path_master'],0))
    #seperate 1A and 1B
    if path_dic['path_1B'] != 'N':
        df_EM_1B = isolate_1B(df_mastersheet.copy(deep=True))
    if path_dic['path_1B_prev'] != 'N':
        df_EM_1B_prev = read(path_dic['path_1B_prev'],1)

    #1B
    #worksite calc_1B
    if path_dic['path_1B'] != 'N':
        df_WD_1B = worksite(df_EM_1B.copy(deep=True))
        #company details alignment 1A
        df_FD_1B = align_firm(df_EM_1B.copy(deep=True))
        #STP_1A
        df_STP_1B = segragated_team_plan(df_EM_1B.copy(deep=True))
        #Employee details align
        df_EM_1B = align_format(df_EM_1B)
        df_1B_prev = read(path_dic['path_1B_prev'],1)

    #align format for mastersheet
    df_mastersheet = align_format(df_mastersheet)
    #compare for new and removed names
    df_outdated = read(path_dic['path_pre'], 0)
    df_compare = compare(df_mastersheet,df_outdated)
    #check for switch
    df_switch = switch_check(df_mastersheet.copy(deep = True),df_outdated.copy(deep = True))
    #track vacinated for dorm
    df_vc_over45 = isvacinated_over45(df_mastersheet.copy(deep=True))
    #track vacinated for over 45
    df_vc_dorm = isvacinated_dormcheck(df_mastersheet.copy(deep=True))
    #concatenate both df_vc_over45 and df_vc_dorm together(all duplicates to remove)
    df_vc = consolidate(df_vc_over45,df_vc_dorm)
    #end time
    end_time = datetime.now()
    #write all into new file
    write_BCA_master(path_dic['path_master'],df_mastersheet,df_compare,df_vc,df_switch)
    if path_dic['path_1B'] != 'N':
        write_BCA_1B(path_dic['path_1B'],df_FD_1B,df_EM_1B,df_WD_1B,df_STP_1B,df_compare,df_switch)
    print('BCA format ready')
    print('Duration: {}'.format(end_time - start_time))
