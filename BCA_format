import pandas as pd
import numpy as np
from collections import Counter
import random
from datetime import datetime

ED_colkeep = (0,1,2,3,4,5,6,7,8,9,10,11,12,14,20,25,38,34,35,36,66,67,23)
FD_colkeep = ('SL NO','Role in Firm','UEN','Direct Employer Company Name',
              'Name of company POC',
              'Mobile of company POC',
              'Email of company POC',
              'Role of Firms')
VC_dorm = ('Sungei Tengah Lodge','Tuas View Dormitory',
                'CDPL Tuas Dormitory','PPT Lodge 1B','Kranji Lodge 1')
VC_colkeep = ('NRIC/FIN','Type of Pass','Name','Age','Company',
                'Direct Employer Company Name','For PBDs, select dormitory from drop-down list',
                'Vaccination 1st Dose Date (DD/MM/YY)','Vaccination 2nd Dose Date(DD/MM/YY)')

def read(path,sheet):
    df = pd.read_excel(path,sheet)
    return df
def segragated_team_plan(df):
    df_em = df
    data_c = ('SL NO','Role in organisation','Direct Employer Company Name',
              'Team identifier','NRIC/FIN','Name','Activity','Work level',
              'Work Zone e.g Blk 1 lvl 8, zone A etc',
              'Arrival time (HH:MM AM/PM)',
              'Morning break (HH:MM AM/PM, duration)',
              'Lunch time (HH:MM AM/PM, duration)',
              'Afternoon break (HH:MM AM/PM, duration)',
              'Exit time (HH:MM AM/PM)')
    drop_col = []
    df_STP = pd.DataFrame()
    for i in data_c:
        df_STP[i] = df_em[i]
    df_STP.rename(columns={'Role in organisation':'Role',
                           'Direct Employer Company Name':'Firm',
                           'Name':'Name of worker/staff',
                           'Activitiy':'Activity to be carried out',
                           'Work level':'Location of work - Floor',
                           'Work Zone e.g Blk 1 lvl 8, zone A etc':'Location of work - Zone'},inplace=True)
    return df_STP

def remove_blanks_duplicates(df):
    #remove duplicates in Employee details sheet
    df.drop_duplicates(subset = ['NRIC/FIN'],keep = "first", inplace = True)#source is changed
    #remove blanks or #N/A values
    df.dropna(axis = 0,how ='any', subset = ['NRIC/FIN'],inplace = True)
    df.index = np.arange(1,len(df)+1)
    df['SL NO'] = df.index
    df['Area of Profesional'].fillna('NA',inplace=True)
    df['Age']=pd.to_numeric(df['Age'])
    return df

def align_format(df):
    global ED_colkeep
    lst = ('STREET NAME','BLOCK','LEVEL','UNIT','Work Zone e.g Blk 1 lvl 8, zone A etc',
           'Team identifier')
    df_col = list(df.columns)
    drop_col =[]
    #drop based on index
    for num in range(0,len(df_col)):
        if num not in ED_colkeep:
            drop_col.append(df_col[num])
    df.drop(columns=drop_col,inplace=True)
    for i in lst:
        df[i].fillna('NA',inplace=True)
    #reorder columns
    df_1 = df.reindex(columns=['SL NO','UEN','NRIC/FIN','Name','Mobile No','Type of Residence','Area of Profesional','Occupation',
                               'Is the individual appointed as a Safe Management Officer (SMO)?',
                               'Is the individual appointed as a Safe Distancing Officer (SDO)?',
                               'Is the individual appointed as a COVID Safe Worker Leader?',
                               'Is the individual based in a worksite/facility?','Company',
                               'Direct Employer Company Name','STREET NAME','BLOCK','LEVEL','UNIT','Work Zone e.g Blk 1 lvl 8, zone A etc','Team identifier','Type of Pass','Gender'])
    return df_1

def write_BCA(path,df1,df2,df3,df4,df_compare,df_vc):
    with pd.ExcelWriter(path) as writer:
        df1.to_excel(writer, sheet_name = 'Firm Details', index=False)
        df2.to_excel(writer, sheet_name = 'Employee Details', index=False)
        df4.to_excel(writer, sheet_name = 'Worksite Details', index=True)
        df3.to_excel(writer, sheet_name = '(LS) Segregated Team Plan', index=False)
        df_compare.to_excel(writer, sheet_name = 'Comparison', index=False)
        df_vc.to_excel(writer, sheet_name = 'Vacination Tracker', index=False)

def add_company(df):
    global FD_colkeep
    proj_ref = []
    df_col = list(df.columns)
    for i in df_col:
        if i not in FD_colkeep:
            df.drop(columns=[i],inplace=True)
            
    df.drop_duplicates(subset = ['UEN'],keep = "first", inplace = True) #drop duplicates
    df.index = np.arange(1,len(df)+1)
    df['SL NO'] = df.index
    for i in range(len(df.index)):
        proj_ref.append('A0552-01579-2018')
    df.insert(1,'BCA Project Reference No / Contract No / Unique Identifier No',proj_ref,False)               
    df.rename(columns={'SL NO':'Serial No',
                       'Direct Employer Company Name':'Firm Name',
                       'Name of company POC':'Representative Name',
                       'Mobile of company POC':'Representative Mobile No',
                       'Email of company POC':'Representative Email'},inplace=True)
    df_1= df.reindex(columns=['Serial No','BCA Project Reference No / Contract No / Unique Identifier No',
                              'Role of Firms','UEN','Firm Name','Representative Name',
                              'Representative Mobile No','Representative Email'])

    return df_1

def worksite(df):
    #pass in copy of EMv1(deep copy)
    #create new dataframe ['Zone','Activity', 'Team', 'week 0' - 'week12']
    df_worksite = pd.DataFrame(columns = ['Work Zone e.g Blk 1 lvl 8, zone A etc','Activity','Team identifier',
                                          'Week 0','Week 1','Week 2', 'Week 3', 'Week 4', 'Week 5', 'Week 6',
                                          'Week 7', 'Week 8', 'Week 9', 'Week 10', 'Week 11', 'Week 12'])
    df_worksite.fillna(0)#fill all cells with 0
    #remove blanks
    df.dropna(axis = 0,how ='any', subset = ['Team identifier'],inplace = True)
    df_wd_columns = list(df_worksite.columns)
    for i in df_wd_columns[0:3]:
        #assign df values fo df_worksite values
        #column names must be the same
        df_worksite[i] = df[i]
    #store team list in a dictonary(key = team, value = count)
    dic = dic_team(df_worksite['Team identifier'])
    #remove all duplicates from team
    df_worksite.drop_duplicates(subset = ['Team identifier'],keep = "first", inplace = True)
    #dic should be a dic{key = team, value = count of team}
    #call calculate func to fill in weeks
    df_worksite.index = df_worksite['Team identifier']
    df_worksite = calc_team(dic, df_worksite)
    df_worksite.index = np.arange(1,len(df_worksite)+1)
    return df_worksite

def calc_team(dic,df):
    weekly_list = ('1-1','2-1','2-2','2-3','40-1')#full attendence every week
    client_subcon_temp = ('41-1','41-2','41-3','41-4','41-5','41-6','41-7',
                          '43-1','44-1','45-1','46-1','47-1','48-1')
    wt = ((df.columns))[3:]
    df_weeks= list(df.columns)#list of columns names to be iterated
    df_weeks = df_weeks[3:]#drop out first columns name
    team_list = df['Team identifier']#index
    for team in df['Team identifier']:
        val = dic.get(team_list[team])
        if team_list[team] in weekly_list:
            for week in wt:
                df.loc[team,week] = val
        elif team_list[team] in client_subcon_temp:
            for week in wt[:5:1]:
                df.loc[team,week] = val
        else:#team in neither 
            if (val%3) == 1:
                #if activity is WSH
                if df.loc[team, 'Activity'] == 'WSH' or df.loc[team, 'Activity'] == 'Scaffolding work':#WSH and scafoldding exception
                    for week in wt:
                        df.loc[team,week] = val
                else:
                    if val>10:
                        for week in wt[::2]:#all even weeks
                            df.loc[team,week] = (val//2) + int(random.randrange(0,(val//3),1))
                        for week in wt[1::2]:#all odd weeks
                            df.loc[team,week] = (val//2) + int(random.randrange(0,(val//5),1))
                    else:
                        for week in wt:
                            df.loc[team,week] = val
            else:#val<100 or val == 100
                if df.loc[team, 'Activity'] == 'WSH' or df.loc[team, 'Activity'] == 'Scaffolding work':##WSH and scafoldding exception
                    for week in wt:
                        df.loc[team,week] = val
                else:
                    if val>10:
                        for week in wt[::2]:# all even weeks
                            df.loc[team,week] = (val//2) + int(random.randrange(0,(val//3),1))
                        for week in wt[1::2]:#all odd weeks
                            df.loc[team,week] = (val//2) + int(random.randrange(0,(val//5),1))
                            
                    else:#val<10
                        for week in wt:
                            df.loc[team,week] = val
    #fill all missing cells as int(0)\
    for week in wt:
        df[week].fillna(int(0),inplace=True)
    return df

def dic_team(df):#pass of one column in argument
    d = Counter(list(df))
    return d

def compare(df_A,df_B):
    #compare latest and earlier versions
    #df_A is latest, df_B is outdated
    #isolate added and remove names
    #create new dataframe
    added_NRIC = []
    added_names = []
    added_company = []
    remove_NRIC = []
    remove_names = []
    remove_company = []
    #for added names
    col_nricA = list(df_A.iloc[:,2])
    col_nricB = list(df_B.iloc[:,2])
    for num in range(1,len(col_nricA)):
        if df_A.iloc[num,2] in col_nricB:
            pass
        else:
            added_NRIC.append(df_A.iloc[num,2])
            added_names.append(df_A.iloc[num,3])
            added_company.append(df_A.iloc[num,12])
    #for remove names
    for num in range(1,len(col_nricB)):
        if df_B.iloc[num,2] in col_nricA:
            pass
        else:
            remove_NRIC.append(df_B.iloc[num,2])
            remove_names.append(df_B.iloc[num,3])
            remove_company.append(df_B.iloc[num,12])
    #compare len
    while len(added_NRIC) != len(remove_NRIC):
        #if added_NRIC more
        if len(added_NRIC)<len(remove_NRIC):
            added_NRIC.append('-')
            added_names.append('-')
            added_company.append('-')
        if len(remove_NRIC)<len(added_NRIC):
            remove_NRIC.append('-')
            remove_names.append('-')
            remove_company.append('-')
    d_dic = {'added_NRIC/FIN':added_NRIC,'added_names':added_names,
             'added_company':added_company,'remove_NRIC/FIN':remove_NRIC,
             'remove_names':remove_names,'remove_company':remove_company}
    df_compare = pd.DataFrame(data = d_dic)
    return df_compare

def isvacinated_over45(df):
    global VC_colkeep
    #pass in df true copy
    #isolate over 45 age grp
    index = df.index[df['Age']<45].tolist()
    df.drop(index = index,inplace=True)
    lst_col = list(df.columns)
    #align column format
    for col in lst_col:
        if col not in VC_colkeep:
            df.drop(columns=[col],inplace=True)
    #reindex column
    df_1= df.reindex(columns=['NRIC/FIN','Name','Age','Company',
                'Direct Employer Company Name','For PBDs, select dormitory from drop-down list','Type of Pass',
                'Vaccination 1st Dose Date (DD/MM/YY)','Vaccination 2nd Dose Date(DD/MM/YY)'])
    return df_1

def isvacinated_dormcheck(df):
    #pass in global variables
    global VC_dorm
    global VC_colkeep
    #pass in full master list
    #keep appropriate columns
    lst_col = list(df.columns)
    for col in lst_col:
        if col in VC_colkeep:
            lst_col.remove(col)
    df.drop(columns=lst_col,inplace=True)
    #reindex columns
    df_1= df.reindex(columns=['NRIC/FIN','Name','Age','Company',
                'Direct Employer Company Name','For PBDs, select dormitory from drop-down list','Type of Pass',
                'Vaccination 1st Dose Date (DD/MM/YY)','Vaccination 2nd Dose Date(DD/MM/YY)'])
    for pass_type in df_1['Type of Pass']:
        if pass_type == 'SPR/SC':
            df_1.drop(index = df_1.index[df_1['Type of Pass']=='SPR/SC'].tolist(),inplace = True)
    for dorm_type in df_1['For PBDs, select dormitory from drop-down list']:
        if dorm_type not in VC_dorm:
            df_1.drop(index = df_1.index[df_1['For PBDs, select dormitory from drop-down list']==dorm_type].tolist(),inplace = True)
    df_1.dropna(axis = 0,how ='any', subset = ['For PBDs, select dormitory from drop-down list'],inplace = True)
    return df_1
def consolidate(df_over_45,df_dorm):
    #to consolidate both dataframes
    df_vc = pd.concat([df_over_45,df_dorm])
    #remove potential duplicates of NRIC
    df_vc.drop_duplicates(subset = ['NRIC/FIN'],keep = "first", inplace = True)
    return df_vc

if __name__ == '__main__':
    path1 = str(input("Please enter in file location of BCA submission file:\n"))
    path2 = str(input("Please enter in file location of preceeded BCA approved file:\n"))
    path1 = path1.replace('\\','/')
    path2 = path2.replace('\\','/')
    #start time
    start_time = datetime.now()
    #initialise dataframes
    df_EMv1 = remove_blanks_duplicates(read(path1,1))
    df_FD = df_EMv1.copy(deep=True)#deep copy1
    df_wdv1 = df_EMv1.copy(deep=True)#deep copy2
    #worksite calc
    df_WD = worksite(df_wdv1)
    #company details alignment
    df_FD1 = add_company(df_FD)
    #STP
    df_STP = segragated_team_plan(df_EMv1)
    #Employee details align
    df_EMv2 = align_format(df_EMv1.copy(deep=True))
    #compare for new and removed names
    df_outdated = read(path2, 1)
    df_compare = compare(df_EMv2,df_outdated)
    #track vacinated for dorm
    df_vc_over45 = isvacinated_over45(df_EMv1.copy(deep=True))
    #track vacinated for over 45
    df_vc_dorm = isvacinated_dormcheck(df_EMv1.copy(deep=True))
    #concatenate both df_vc_over45 and df_vc_dorm together(all duplicates to remove)
    df_vc = consolidate(df_vc_over45,df_vc_dorm)
    #end time
    end_time = datetime.now()
    #write all into new file
    write_BCA(path1,df_FD1,df_EMv2,df_STP,df_WD,df_compare,df_vc)
    print('BCA format ready')
    print('Duration: {}'.format(end_time - start_time))
